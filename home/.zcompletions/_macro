#compdef _macro macro

function _macro {
    declare state line

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

    case $state in
        command)
            declare -a subcommands
            # shellcheck disable=SC2016,SC2034
            subcommands=(
                'new:Create a new macro'
                'cat:Print a macro'
                'edit:Edit a macro in your $EDITOR'
                'run:Run a macro'
                {cp,copy}':Copy a macro'
                {mv,move}':Move a macro'
                {rm,delete}':Delete a macro'
                {use,current}':Get or set the current macro for further operations'
                {ls,list}':List all macros'
                'reset:Unset the current macro'
            )
            _describe -t commands 'git flow' subcommands
        ;;
        options)
            case ${line[1]} in
                run)
                    _macro_run
                ;;
                use|current)
                    _macro_use
                ;;
                edit)
                    _macro_edit
                ;;
                cat)
                    _macro_cat
                ;;
                cp|copy)
                    _macro_cp
                ;;
                mv|move)
                    _macro_mv
                ;;
                rm|delete)
                    _macro_rm
                ;;
                *)
                ;;
            esac
        ;;
        *)
        echo "_macro: unknown state ${state}"
        ;;
    esac
}

# single <macro> or current commands
_macro_run()
{
    declare macro
    macro="$(macro current)"
    if [[ -z "$macro" ]]; then
        _arguments -C "1: :( $(macro ls -q) )"
    fi
}

# single <macro> commands
_macro_use()
{
    _arguments -C "1: :( $(macro ls -q) )"
}

_macro_cp()
{
    _arguments -C "1: :( $(macro ls -q) )"
}

_macro_mv()
{
    _arguments -C "1: :( $(macro ls -q) )"
}


# multi <macro> commands
# TODO: figure out how to exclude already chosen options...
_macro_edit()
{
    _arguments -Cu "*: :( $(macro ls -q) )"
}

_macro_cat()
{
    _arguments -Cu "*: :( $(macro ls -q) )"
}

_macro_rm()
{
    _arguments -Cu "*: :( $(macro ls -q) )"
}

_macro "$@"
